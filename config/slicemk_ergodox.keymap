#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>



/ {

behaviors {
 	morph1: morph1{
 		compatible = "zmk,behavior-mod-morph";
 	   	label = "morph1";
 	   	#binding-cells = <0>;
 	   	bindings = <&kp APOSTROPHE>, <&kp GRAVE>;
 	   	mods = <(MOD_LSFT|MOD_RSFT)>;
 	};

 	morph2: morph2{
 		compatible = "zmk,behavior-mod-morph";
 	   	label = "morph2";
 	   	#binding-cells = <0>;
 	   	bindings = <&kp TILDE>, <&kp CARET>;
 	   	mods = <(MOD_LSFT|MOD_RSFT)>;
 	};

 	morph3: morph3{
 		compatible = "zmk,behavior-mod-morph";
 	   	label = "morph3";
 	   	#binding-cells = <0>;
 	   	bindings = <&kp LEFT_BRACE>, <&kp RIGHT_BRACE>;
 	   	mods = <(MOD_LSFT|MOD_RSFT)>;
 	};

 	morph4: morph4{
 		compatible = "zmk,behavior-mod-morph";
 	   	label = "morph4";
 	   	#binding-cells = <0>;
 	   	bindings = <&kp LPAR>, <&kp RPAR>;
 	   	mods = <(MOD_LSFT|MOD_RSFT)>;
 	};

 	morph5: morph5{
 		compatible = "zmk,behavior-mod-morph";
 	   	label = "morph5";
 	   	#binding-cells = <0>;
 	   	bindings = <&kp LBKT>, <&kp RBKT>;
 	   	mods = <(MOD_LSFT|MOD_RSFT)>;
 	};

 	morph6: morph6{
 		compatible = "zmk,behavior-mod-morph";
 	   	label = "morph6";
 	   	#binding-cells = <0>;
 	   	bindings = <&kp LESS_THAN>, <&kp GREATER_THAN>;
 	   	mods = <(MOD_LSFT|MOD_RSFT)>;
 	};

	gth: global-quick-tap {
    		compatible = "zmk,behavior-hold-tap";
    		label = "GLOBAL_QUICK_TAP";
    		#binding-cells = <2>;
    		flavor = "hold-preferred";
    		tapping-term-ms = <200>;
    		quick-tap-ms = <175>;
    		bindings = <&kp>, <&kp>;
	};
	
	hm: homerow_mods {  
		compatible = "zmk,behavior-hold-tap";  
    	label = "GLOBAL_QUICK_TAP2";
		#binding-cells = <2>;  
		tapping-term-ms = <200>;  
		quick-tap-ms = <175>;  
		flavor = "tap-preferred";  
		bindings = <&kp>, <&kp>;  
	};  
	
	hm2: homerow_mods2 {  
		compatible = "zmk,behavior-hold-tap";  
    	label = "GLOBAL_QUICK_TAP3";
		#binding-cells = <2>;  
		tapping-term-ms = <200>;  
		quick-tap-ms = <175>;  
		flavor = "tap-preferred";  
		bindings = <&mo>, <&sl>;  
	};  

};

	keymap {
		compatible = "zmk,keymap";
		layer_0 {
			bindings = <
				&bootloader
				&none    	&kp N1   	&kp N2    	&kp N3		&kp N4          &kp N5    &none      						     		&kp PRINTSCREEN 	&kp N6 	&kp N7  	&kp N8        	&kp N9   		&kp N0         	&kp INSERT
				&kp TAB  	&kp Q    	&kp W     	&kp E   	&kp R           &kp T     &none      						     		&none           	&kp Y  	&kp U   	&kp I         	&kp O    		&kp P         	&sl 4
				&kp ESC  	&kp A    	&kp S     	&kp D   	&kp F           &kp G  	                           				     						&kp H  	&kp J  	    &kp K         	&kp L         	&kp SEMICOLON	&kp MINUS
				&kp LSFT 	&kp Z    	&kp X     	&kp C   	&kp V      		&kp B     &caps_word 						     		&mo 3           	&kp N  	&kp M   	&kp CMMA      	&kp DOT  		&kp FSLH       	&kp RSHFT
				&kp LCTL 	&kp LGUI 	&kp LALT	&kp SPACE   	&kp LA(TAB)	                                        		              				       		&kp F13 	&m_dito			&kp RALT		&kp RGUI      	&kp RCTL

															     				&kp C_PREVIOUS 	&kp C_NEXT			&kp C_VOL_DN 	&kp C_VOLUME_UP
				        									     &mo 1    		&gth LCTL DEL	&none          		&kp C_MUTE   	&gth RCTL BSPC        	&kp SPACE
				                                   								    	   &kp RET    				&kp RET
			>;
		};
		simbolos {
			bindings = <
				&bootloader
				&trans 	 	&none          	&none     	&none     	&none          	&none     &kp F3 							     	&kp F6  		&none 		&none           &none 			&none					&none        	&trans
				&trans 	 	&none          	&none		&sQuote   	&none          	&none     &kp F2 							     	&kp F5  		&mMatch1 	&kp AMPERSAND   &kp ASTERISK  	&kp LEFT_PARENTHESIS 	&none        	&trans
				&trans 	 	&morph4			&morph3		&morph5		&morph6			&none         							     		           		&mMatch2 	&kp DOLLAR      &kp PERCENT   	&kp CARET            	&kp COLON    	&kp UNDERSCORE
				&mo 2  	 	&kp PIPE       	&kp PLUS  	&kp EQUAL 	&kp QUESTION	&none     &kp F1 							     	&kp F4  		&mMatch3 	&kp EXCLAMATION &kp AT_SIGN   	&kp HASH             	&kp BSLH		&trans
				&trans	 	&trans         	&trans    	&none     	&none                            								        	       			&trans 	       	&none         	&trans               	&trans       	&trans
																		      	&none  	     &kp F9 								&kp F12      &none
																	     &none    &trans		 &kp F8 								&kp F11      &trans 	 &trans
										                       								&kp F7 								&kp F10
			>;
		};
		numeros {
			bindings = <
				&bootloader
				&trans   	&none          	&none     	&none     	&none  		&none     &none  							    	&none  			&none  	&none           &none         	&none        	  	&none     	&trans
				&trans   	&trans         	&trans    	&none		&trans 		&none     &none  							     	&none  			&none  	&kp NUMBER_7    &kp NUMBER_8  	&kp NUMBER_9 	  	&none     	&trans
				&trans   	&none			&none		&none 		&none 		&none         							     		       			&none  	&kp NUMBER_4    &kp NUMBER_5  	&kp NUMBER_6 	  	&kp DOT   	&trans
				&trans   	&none			&none  		&none 		&none  		&none     &none  							     	&none  			&none  	&kp NUMBER_1    &kp NUMBER_2  	&kp NUMBER_3 	  	&kp COMMA 	&trans
				&trans   	&trans         	&trans    	&none     	&none                            								    		        	&kp NUMBER_0	&none         	&trans       	  	&trans    	&trans
																			     		&trans  	     &trans 		&trans 	     &trans
																		     &none    &trans   	     &trans 		&trans 	     &trans 	     	&trans
								                                  									    &trans 		&trans
			>;
		};
		movimetos {
			bindings = <
				&bootloader
				&none		&none  		&none     	&none     	&none           &none     &none  							     	&none  			&none  	&none           &none 	     	&none   		&none  		&bootloader
				&trans   	&none  		&none     	&kp UP   	&none           &none     &none  							     	&trans 			&none  	&none           &none 	     	&none   		&none  		&none
				&trans   	&none  		&kp LEFT  	&kp DOWN	&kp RIGHT		&none            							     		       		&none  	&none           &none 	     	&none   		&none  		&none
				&trans   	&none  		&none     	&none    	&none           &none     &none  							     	&none  			&none  	&none           &none 	     	&none   		&none  		&trans
				&trans   	&trans		&trans    	&none    	&none                                           								       		&none  		&none 	     	&trans 	          	&trans 		&trans
															      		&none	     &none  		&none	     &none
														     &kp HOME &kp END 	     &none  		&none  	     &kp PG_UP 	     	&kp PG_DN
				                        										   &trans 		&trans
			>;
		};
		acentos {
			bindings = <
				&bootloader
				&none    	&none  		&none 	  	&none   	&none      		&none     &none 								&none 			&none 	&none			&none         	&none        		&none 		&none
				&none    	&none  		&none 	  	&none   	&none 	   		&none     &none 								&none 			&none 	&none			&none			&none		&none 		&none
				&none    	&none  		&kp GRAVE	&kp TILDE	&kp APOSTROPHE	&none           									     		&none   &none 			&none			&none 				&none 		&none
				&none    	&none  		&none 	  	&acC    	&none 	   		&none     &none 								&none 			&none 	&none   		&none         	&none        		&none 		&none
				&none    	&none  		&none 	  	&none		&none           														&none   	&none         		&none        	&none 		&none
															      		&none	     &none 		&none 	     &none
														     &none    &none	     &none 		&none 	     &none 		&none
													                               &none 		&none
			>;
		};
	};

	ZMK_MACRO(mMatch1,     	   wait-ms = <20>; tap-ms = <20>; bindings = <&macro_tap &kp LPAR>,    		<&macro_tap &kp RPAR>, 			<&macro_tap &kp LEFT>;)
	ZMK_MACRO(mMatch2,     	   wait-ms = <20>; tap-ms = <20>; bindings = <&macro_tap &kp LEFT_BRACE>, 	<&macro_tap &kp RIGHT_BRACE>, 	<&macro_tap &kp LEFT>;)
	ZMK_MACRO(mMatch3,     	   wait-ms = <20>; tap-ms = <20>; bindings = <&macro_tap &kp LBKT>, 		<&macro_tap &kp RBKT>, 			<&macro_tap &kp LEFT>;)
	
	ZMK_MACRO(dQuote,  wait-ms = <20>; tap-ms = <20>; bindings = <&macro_tap &kp DOUBLE_QUOTES>, <&macro_tap &kp SPACE>;)
	ZMK_MACRO(sQuote,  wait-ms = <20>; tap-ms = <20>; bindings = <&macro_tap &kp APOSTROPHE>, <&macro_tap &kp SPACE>;)
	ZMK_MACRO(acA1,     	   wait-ms = <20>; tap-ms = <20>; bindings = <&macro_tap &kp APOSTROPHE>,    <&macro_tap &kp A>;)
	ZMK_MACRO(m_acento_a2,     wait-ms = <20>; tap-ms = <20>; bindings = <&macro_tap &kp TILDE>,         <&macro_tap &kp A>;)
	ZMK_MACRO(m_acento_a3,     wait-ms = <20>; tap-ms = <20>; bindings = <&macro_tap &kp CARET>,         <&macro_tap &kp A>;)	
	ZMK_MACRO(m_acento_a4,     wait-ms = <20>; tap-ms = <20>; bindings = <&macro_tap &kp GRAVE>,         <&macro_tap &kp A>;)
	
	ZMK_MACRO(m_acento_o1,     wait-ms = <20>; tap-ms = <20>; bindings = <&macro_tap &kp APOSTROPHE>,    <&macro_tap &kp O>;)
	ZMK_MACRO(m_acento_o2,     wait-ms = <20>; tap-ms = <20>; bindings = <&macro_tap &kp TILDE>,         <&macro_tap &kp O>;)
	ZMK_MACRO(m_acento_o3,     wait-ms = <20>; tap-ms = <20>; bindings = <&macro_tap &kp CARET>,         <&macro_tap &kp O>;)
	
	ZMK_MACRO(acE1,     	   wait-ms = <20>; tap-ms = <20>; bindings = <&macro_tap &kp APOSTROPHE>,    <&macro_tap &kp E>;)
	ZMK_MACRO(m_acento_e2,     wait-ms = <20>; tap-ms = <20>; bindings = <&macro_tap &kp CARET>,         <&macro_tap &kp E>;)
	
	ZMK_MACRO(m_acento_u1,     wait-ms = <20>; tap-ms = <20>; bindings = <&macro_tap &kp APOSTROPHE>,    <&macro_tap &kp U>;)
	ZMK_MACRO(m_acento_i1,     wait-ms = <20>; tap-ms = <20>; bindings = <&macro_tap &kp APOSTROPHE>,    <&macro_tap &kp I>;)
	
	ZMK_MACRO(acC,      wait-ms = <20>; tap-ms = <20>; bindings = <&macro_tap &kp APOSTROPHE>,    <&macro_tap &kp C>;)
	
	macros {
		m_dito: m_dito {
		label = "ZM_dito";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
			= <&macro_press &kp LCTL>
			, <&macro_tap &kp APOSTROPHE>
			, <&macro_release &kp LCTL>
			;
		};
	};

};
